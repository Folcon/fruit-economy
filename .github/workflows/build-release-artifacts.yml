name: Build Release Artifacts
on:
  push:
    tags:
      - v*
#  release:
#    types: [created]
#  workflow_run:
#    workflows: [Release]
#    types:
#      - completed
jobs:
  build-deb:
    strategy:
      matrix:
        os: [
            ubuntu-latest,
            macos-latest,
            windows-latest
        ]

    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: prepare java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: install clojure
        uses: DeLaGuardo/setup-clojure@3.7
        with:
          lein: latest

      - name: download jwm artifact jars
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repo: HumbleUI/JWM
          workflow: build-deploy.yml
          workflow_conclusion: success
          name: jars
          run_id: 1718998078

      - name: recursively print info in current directory macos + linux
        if: ${{ matrix.os != 'windows-latest' }}
        run: ls && find . -maxdepth 2 -type d -exec ls -ld "{}" \;

      - name: recursively print info in current directory windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: tree /F

      - name: install jwm to maven repo
        shell: bash
        run: mvn install:install-file -Dfile=jwm-b3fecb126a.jar -DpomFile=maven/META-INF/maven/io.github.humbleui/jwm/pom.xml

      - name: build uberjar
        run: lein uberjar

      - name: create version number for app
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV

      - name: set conditional app-version arg
        id: app_version
        shell: bash
        run: |
          [[ ${RELEASE_VERSION%.*.*} == 0 ]] \
          && echo ::set-output name=app_version_arg::"" \
          || echo ::set-output name=app_version_arg::$(echo --app-version ${RELEASE_VERSION})

      - name: did we record app-version or the RELEASE_VERSION?
        shell: bash
        run: echo "${{ steps.app_version.outputs.app_version_arg }}" ; echo "${RELEASE_VERSION}" ; echo "${{ env.RELEASE_VERSION }}"

      - name: build package on linux
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: jpackage @jpackage/common @jpackage/linux ${{ steps.app_version.outputs.app_version_arg }}

      - name: build package on macos
        if: ${{ matrix.os == 'macos-latest' }}
        run: jpackage @jpackage/common @jpackage/mac ${{ steps.app_version.outputs.app_version_arg }}

      - name: build package on windows
        shell: bash
        if: ${{ matrix.os == 'windows-latest' }}
        run: jpackage @jpackage/common @jpackage/windows ${{ steps.app_version.outputs.app_version_arg }}

      - name: recursively print info again in current directory macos + linux
        if: ${{ matrix.os != 'windows-latest' }}
        run: ls && find . -maxdepth 2 -type d -exec ls -ld "{}" \;

      - name: recursively print info again in current directory windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: tree /F

      - name: codesign executable on macos
        if: ${{ matrix.os == 'macos-latest' }}
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          MACOS_IDENTITY: ${{ secrets.MACOS_IDENTITY }}
          DEVELOPER_ID: ${{ secrets.DEVELOPER_ID }}
        run: |
          export PASSWORD=$(echo $RANDOM | git hash-object --stdin | head -c 20)
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p $PASSWORD build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p $PASSWORD build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $PASSWORD build.keychain
          /usr/bin/codesign --force -s $MACOS_IDENTITY Fruit\ Economy-1.0.dmg -v

      - name: rename file on linux
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: mv fruit-economy_1.0-1_amd64.deb fruit-economy_${{ env.RELEASE_VERSION }}_amd64.deb

      - name: rename file on macos
        if: ${{ matrix.os == 'macos-latest' }}
        run: mv Fruit\ Economy-1.0.dmg Fruit\ Economy-${{ env.RELEASE_VERSION }}.dmg

      - name: rename file on windows
        shell: bash
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          zip -9 -y -r Fruit\ Economy.zip Fruit\ Economy/ && \
          mv Fruit\ Economy.zip Fruit\ Economy-${{ env.RELEASE_VERSION }}.zip

      - name: release artifacts on linux
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            fruit-economy_${{ env.RELEASE_VERSION }}_amd64.deb

          #upload_url: ${{ github.event.release.upload_url }}
          #asset_path: fruit-economy-${{ github.ref_name }}-amd64.deb
          #asset_name: fruit-economy-${{ github.ref_name }}-amd64.deb
          #asset_content_type: application/vnd.debian.binary-package

      - name: release artifacts on macos
        if: ${{ matrix.os == 'macos-latest' }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            Fruit Economy-${{ env.RELEASE_VERSION }}.dmg
          #upload_url: ${{ github.event.release.upload_url }}
          #asset_path: fruit-economy-${{ github.ref_name }}.dmg
          #asset_name: fruit-economy-${{ github.ref_name }}.dmg
          #asset_content_type: application/x-apple-diskimage

      - name: release artifacts on windows
        if: ${{ matrix.os == 'windows-latest' }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            Fruit Economy-${{ env.RELEASE_VERSION }}.zip
          #upload_url: ${{ github.event.release.upload_url }}
          #asset_path: fruit-economy-${{ github.ref_name }}.exe
          #asset_name: fruit-economy-${{ github.ref_name }}.exe
          #asset_content_type: application/vnd.microsoft.portable-executable
